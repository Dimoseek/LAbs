#include <iostream>

// Функция hello объявлена здесь, но её определение не предоставлено в этом файле.
// Ключевое слово 'static' ограничивает видимость функции только для данного модуля трансляции,
// что делает её недоступной за пределами этого файла.

static int hello(int x) {
    // Функция hello возвращает удвоенное значение входного параметра.
    return x * 2;
}

// Функция main при выполнении вызывает функцию hello с аргументом 42.
int main() {
    int result = hello(42);
    // Выводит результат, полученный из функции hello, в консоль.
    std::cout << "Result: " << result << std::endl;
    return 0;
}

// В результирующем исполняемом файле будет включено только одно определение функции hello.
// Если функция hello определена в разных файлах и каждый файл компилируется в отдельные объектные файлы,
// компилятор выберет одно из них, обычно первое встреченное. 
// Не будет дублирования кода функции hello в конечном исполняемом файле, даже если она определена в нескольких файлах.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
int hello(int x) {
// Отсутствие определения функции вызывает ошибку "multiple definition of hello(int)".
// Это происходит из-за того, что существуют два отдельных файлов, каждый из которых пытается предоставить определение функции с одним и тем же именем.
    return x * 3;
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include <stdlib.h>
#include <iostream>

int* stackMemory1()
{
    int a = 1;
    return &a; // Возвращает указатель на локальную переменную a.
}

int* stackMemory2()
{
    int b = 2;
    return &b; // Возвращает указатель на локальную переменную b.
}

int main()
{
    int* b = stackMemory1(); // Вызывается функция stackMemory1, возвращается указатель на переменную a.
    int a1 = *b; // Значение переменной a присваивается a1.
    int* c = stackMemory2(); // Вызывается функция stackMemory2, возвращается указатель на переменную b.
    int a2 = *c; // Значение переменной b присваивается a2.
    int a3 = *b; // Попытка доступа к значению переменной a через указатель b, что невозможно, так как переменная a больше не существует.

    std::cout << a1 << std::endl; // Вывод значения a1 (значение переменной a из stackMemory1).
    std::cout << a2 << std::endl; // Вывод значения a2 (значение переменной b из stackMemory2).
    std::cout << a3 << std::endl; // Попытка доступа к значению переменной a через указатель b, но это не сработает.
    std::cout << ((std::byte*)b - (std::byte*)c) << std::endl; // Разница в адресах, на которые указывают b и c.

    return 0;
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include <iostream>

void staticMemory()
{
    // Внутри функции staticMemory объявлена переменная 'a' как static.
    // Это означает, что 'a' имеет статическую продолжительность жизни, сохраняя своё значение между вызовами функции.
    // Значение 'a' инициализируется только один раз при первом вызове функции.
    static int a = 0;

    std::cout << "a: " << a << std::endl; // Вывод значения 'a'.
    a += 1; // Инкремент 'a' на каждом вызове функции.
}

int main()
{
    staticMemory(); // Выводит 0, так как 'a' инициализируется и равно 0 на первом вызове.
    staticMemory(); // Выводит 1, так как 'a' увеличивается на 1 и сохраняет значение между вызовами.
    staticMemory(); // Выводит 2, так как 'a' увеличивается ещё на 1.
    return 0;
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include <iostream>

int a = 0; // Объявлена глобальная переменная 'a'.

void staticMemory()
{
    // Функция staticMemory выводит значение переменной 'a'.
    std::cout << "a: " << a << std::endl;

    // Увеличивает значение 'a' на 1.
    a += 1;
}

int main()
{
    staticMemory(); // Выводит 0, так как 'a' имеет начальное значение 0.
    staticMemory(); // Выводит 1, так как 'a' увеличивается на 1 после первого вызова.
    staticMemory(); // Выводит 2, так как 'a' снова увеличивается на 1 после второго вызова.
    
    return 0;
}



